env:
  GH_TOKEN: ${{ github.token }}
  RELEASEURL: "https://github.com/${{ github.repository }}/releases/download"

on:
  pull_request:
    branches:
      - "main"
  push:
    branches:
      - "main"
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      force-rebuild:
        description: "Force rebuild"
        required: true
        default: false
        type: boolean

# Needed to allow creating a release
permissions:
  contents: write

# Prevent multiple workflow runs from racing to ensure that pushes are made
# sequentialy for the main branch. Also cancel in progress workflow runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: setup-mkosi
        uses: systemd/mkosi@main
      - name: checkout repo
        uses: actions/checkout@main
      - name: Decrypt large secret
        run: ./scripts/decrypt_secrets.sh
        env:
          SECRET_PASSPHRASE: ${{ secrets.SECRET_PASSPHRASE }}
      - name: build
        run: |
          cp $HOME/secrets/mkosi.crt .
          cp $HOME/secrets/mkosi.key .
          chmod 600 ./mkosi.key
          mkosi build --compress-output=yes
      - name: "push main image"
        env:
          PR: ${{ github.event_name == 'pull_request' }}
          FORCE_REBUILD: ${{ inputs.force-rebuild }}
        shell: bash
        run: |
          set -euxo pipefail
          OUTPUTDIR="./mkosi.output"

          # find the first file in the output directory that matches the pattern "SNOW_*.manifest"
          MANIFEST_FILE=$(find "$OUTPUTDIR" -maxdepth 1 -type f -name "SNOW_*.manifest" | head -n 1)
          echo "Found manifest file: $MANIFEST_FILE"

          ARCH=$(jq -r '.config.architecture' "$MANIFEST_FILE")
          VERSION=$(jq -r '.config.version' "$MANIFEST_FILE")
          IMAGE_ID=$(jq -r '.config.name' "$MANIFEST_FILE")
          RELEASE=$(jq -r '.config.release' "$MANIFEST_FILE")
          BASENAME="${IMAGE_ID}_${VERSION}_${ARCH}"
          TAGNAME="${IMAGE_ID}_${VERSION}_${ARCH}"

          find ./mkosi.images/base -type f -exec sha256sum {} \; | sort > ./mkosi.output/inputs
          find ./mkosi.extra/ -type f -exec sha256sum {} \; | sort >> ./mkosi.output/inputs
          sha256sum mkosi.conf >> ./mkosi.output/inputs
          sha256sum mkosi.finalize >> ./mkosi.output/inputs

          cp ./mkosi.output/${BASENAME}.SHA256SUMS > ./mkosi.output/SHA256SUMS

          echo "Proceeding to publish new release for: ${TAGNAME}"

          if [[ "${PR}" == "true" ]]; then
            echo "Pull request detected. Skipping release creation for ${TAGNAME}."
            exit 0
          fi

          git config --global --add safe.directory "${PWD}"

          cd "mkosi.output"

          echo "Searching for ${TAGNAME}.raw.zst"
          ls -la .
          if [[ ! -f ./${TAGNAME}.raw.zst ]]; then
            echo "No image built. Skipping."
            exit 0
          fi
          cat ./SHA256SUMS
          echo "Creating new release for: ${TAGNAME}"

          {
          echo "Release:"
          echo "\`\`\`"
          cat ./SHA256SUMS
          echo "\`\`\`"
          echo ""
          echo "Built using input files:"
          echo "\`\`\`"
          cat ./inputs
          echo "\`\`\`"
          } > notes

          gh release delete \
            --cleanup-tag \
            --yes \
            "${TAGNAME}" \
            || true

          gh release create \
            --title "${IMAGE_ID} ${VERSION} for Debian ${RELEASE} (${ARCH})" \
            --notes-file notes \
            "${TAGNAME}" \
            --latest=false \
            ./${TAGNAME}.raw.zst \
            ./${TAGNAME}.efi \
            ./${TAGNAME}.esp.raw.zst \
            ./${TAGNAME}.usr-x86-64-verity-sig.*.raw.zst \
            ./${TAGNAME}.usr-x86-64-verity.*.raw.zst \
            ./${TAGNAME}.usr-x86-64.*.raw.zst \
            ./${TAGNAME}.manifest \
            ./SHA256SUMS \
            ./inputs
      - name: "named release for SNOW Linux"
        env:
          PR: ${{ github.event_name == 'pull_request' }}
          FORCE_REBUILD: ${{ inputs.force-rebuild }}
        shell: bash
        run: |
          set -euxo pipefail

          if [[ "${PR}" == "true" ]]; then
            echo "Pull request detected. Skipping release creation."
            exit 0
          fi
          rm -f ./SHA256SUMS*
          gh release list --limit 2000 --json tagName > releases.json

          releases=(
            $(
              cat releases.json \
                | jq --arg OS "SNOW" --raw-output '
                  map(
                    select(
                      (.tagName | startswith($OS))
                      and
                      (.tagName != $OS)
                    )
                  )
                  | .[].tagName
                ' \
                | sort -h
            )
          )

          echo "Looking at releases: ${releases[@]}"
          for rel in ${releases[@]}; do
            echo "Fetching SHA256SUMS for release: ${rel}"
            curl --location --fail --output "SHA256SUMS.${rel}" "${RELEASEURL}/${rel}/SHA256SUMS" || touch "SHA256SUMS.${rel}"
          done
          ls ./SHA256SUMS.* | sort -h | xargs cat > SHA256SUMS
          new="$(cat SHA256SUMS | sha256sum)"

          old=""
          echo "Fetching SHA256SUMS from release: SNOW"
          curl --location --fail --output SHA256SUMS.old "${RELEASEURL}/SNOW/SHA256SUMS" || touch SHA256SUMS.old
          old="$(cat SHA256SUMS.old | sha256sum)"
          if [[ "${new}" == "${old}" ]]; then
            echo "No changes for SNOW since last release. Skipping."
          else
            echo "Creating new release: SNOW"

            {
            echo "Versions available:"
            echo "\`\`\`"
            cat ./SHA256SUMS
            echo "\`\`\`"
            } > notes

            gh release delete \
              --cleanup-tag \
              --yes \
              "SNOW" \
              || true

            gh release create \
              --title "SNOW Linux" \
              --notes-file notes \
              "SNOW" \
              --latest=false \
              ./SHA256SUMS
          fi
